{"version":3,"sources":["components/List/List.tsx","components/ListItem/ListItem.tsx","App.tsx","index.tsx"],"names":["List","items","className","map","data","obj","child","path","ListItem","useState","isOpen","setIsOpen","onClick","prev","name","App","list","setList","a","fetch","response","json","listToTree","console","error","arr","newArr","sort","b","length","res","el","parent","find","par","includes","Array","isArray","push","useEffect","getDataList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRA4BeA,G,MAjBa,SAAtBA,EAAuB,GAA6B,IAA5BC,EAA2B,EAA3BA,MAA2B,IAApBC,iBAAoB,MAAR,GAAQ,EACvD,OACE,qBAAMA,UAAWA,EAAjB,SACGD,EAAME,KAAI,SAACC,GAEV,MAAG,UAAWA,EACJ,gCACN,cAAC,EAAD,CAAUC,IAAKD,IACf,cAACJ,EAAD,CAAME,UAAU,OAAOD,MAAOG,EAAKE,UAFnBF,EAAKG,MAKlB,cAAC,EAAD,CAA0BF,IAAKD,GAAhBA,EAAKG,aCEpBC,G,MAfqB,SAAC,GAAW,IAAVH,EAAS,EAATA,IAAS,EACjBI,oBAAS,GADQ,mBACtCC,EADsC,KAC9BC,EAD8B,KAQ7C,OACE,qBAAKC,QALP,WACED,GAAU,SAAAE,GAAI,OAAKA,MAISX,UAAS,mBAAcQ,EAAS,OAAQ,IAApE,SACGL,EAAIS,S,MC2CIC,MApDf,WAAgB,IAAD,EACWN,mBAAwB,IADnC,mBACNO,EADM,KACAC,EADA,iDASb,8BAAAC,EAAA,+EAE2BC,MAAM,gBAFjC,cAEUC,EAFV,gBAGsCA,EAASC,OAH/C,OAGUjB,EAHV,OAIIa,EAAQK,EAAWlB,IAJvB,kDAOImB,QAAQC,MAAR,MAPJ,2DATa,sBAqBb,SAASF,EAAWG,GAElB,IAFqD,EAE/CC,EAAwBD,EAAIE,MAAK,SAACT,EAAgBU,GAAjB,OAAoCA,EAAErB,KAAKsB,OAASX,EAAEX,KAAKsB,UAE5FC,EAAqB,GAJ0B,cAKtCJ,GALsC,yBAK5CK,EAL4C,QAO7CC,EACJN,EAAOO,MACL,SAACC,GAAD,OACEH,EAAGxB,OAAS2B,EAAI3B,MAChBwB,EAAGxB,KAAK4B,SAASD,EAAI3B,OACrBwB,EAAGxB,KAAKsB,OAAS,IAAMK,EAAI3B,KAAKsB,UAIlCG,IACGI,MAAMC,QAAQL,EAAO1B,SAAQ0B,EAAO1B,MAAQ,IACjD0B,EAAO1B,MAAMgC,KAAKP,GAES,IAAvBC,EAAOzB,KAAKsB,QAAcC,EAAIQ,KAAKN,KAf3C,2BAAwB,IAL6B,8BAuBrD,OAAOF,EAGT,OA5CAS,qBAAU,YAHG,mCAKXC,KACC,IAyCI,qBAAKtC,UAAU,MAAf,SACL,cAAC,EAAD,CAAMD,MAAOe,OCrDjByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8c0772a4.chunk.js","sourcesContent":["import React, { FC } from 'react'\r\nimport { ListItem } from '..'\r\nimport {  IDataObject} from '../../types/types'\r\n\r\nimport './style.css'\r\n\r\ninterface ListProps{\r\n  items: IDataObject[],\r\n  className?: string,\r\n}\r\n\r\nconst List: FC<ListProps> = ({items, className = ''}) => {\r\n  return (\r\n    <div  className={className}>\r\n      {items.map((data: any) => {\r\n        // если есть дочерние элементы, то рекурсией отображаем их\r\n        if('child' in data){\r\n          return (<div key={data.path}>\r\n            <ListItem obj={data} />\r\n            <List className='List' items={data.child} />\r\n            </div>)\r\n        }\r\n        return <ListItem key={data.path} obj={data} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List\r\n","import React, { FC, useState } from 'react'\r\nimport { IDataObject } from '../../types/types'\r\n\r\nimport './style.css'\r\n\r\ninterface ListItemProps{\r\n  obj: IDataObject,\r\n}\r\n\r\nconst ListItem: FC<ListItemProps> = ({obj}) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  \r\n  // функция открытия и закрытия католога\r\n  function handleClick() {\r\n    setIsOpen(prev => !prev)\r\n  }\r\n\r\n  return (\r\n    <div onClick={handleClick}  className={`ListItem ${isOpen ? 'open' :''}`}> \r\n      {obj.name}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListItem\r\n","import React, { useEffect, useState } from 'react'\nimport { List } from './components'\nimport { startMirage } from './server-mock'\nimport { IDataObject } from './types/types'\n\n\nif (process.env.NODE_ENV === 'development') {\n  startMirage()\n}\n\nfunction App() {\n  const [list, setList] = useState<IDataObject[]>([])\n\n  useEffect(() => {\n    // получение данных с сервера при рождении компонента\n    getDataList();\n  }, [])\n\n  // получаем данные с сервера и заносим в состояние\n  async function getDataList(): Promise<void>{\n    try{\n      const response = await fetch('/api/regions')\n      const data: IDataObject[] = await response.json()\n      setList(listToTree(data))\n      \n    } catch(e){\n      console.error(e);\n    }\n  }\n\n  // функция преобразования массива в древовидную структуру\n  function listToTree(arr: IDataObject[]): IDataObject[] {\n    // сортируем массив от детей до родителей\n    const newArr: IDataObject[] = arr.sort((a: IDataObject, b: IDataObject) => b.path.length - a.path.length);\n  \n    const res: IDataObject[] = [];\n    for (let el of newArr) {\n      // находим родителя текущего элемента\n      const parent: IDataObject | undefined =\n        newArr.find(\n          (par: IDataObject) =>\n            el.path !== par.path &&\n            el.path.includes(par.path) &&\n            el.path.length - 2 === par.path.length,\n        );\n      \n      // заносим детей к родителям, и к корневым родителям\n      if (parent) {\n        if (!Array.isArray(parent.child)) parent.child = [];\n        parent.child.push(el);\n        // если корневой родитель, то заносим в res\n        if (parent.path.length === 1) res.push(parent);\n      }\n    } /* завершение цикла for */\n    return res;\n  }\n\n  return <div className=\"App\">\n    <List items={list} />\n  </div>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}